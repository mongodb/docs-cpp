.. _cpp-include-link:

===========================================
Include and Link the Driver in Your Program
===========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

The examples on this page use the ``view_and_value.cpp`` example program from the {+driver-short+} source code. You do not need to run this program on a MongoDB server. As a result, the examples use the ``mongo::bsoncxx_shared`` CMake target or the ``libbsoncxx`` pkg-config package. You may use the following library targets, depending on the needs of your project:

- ``mongo::mongoccxx_shared``
- ``libmongocxx`` 
- ``mongo::bsoncxx_static``
- ``libbsoncxx-static``
- ``mongo::mongoccxx_static``
-  ``libmongocxx-static``

The availability of targets is dependent on the particular installation method.

In the sections that follow, replace ``<path-to-mongo-cxx-driver-sources>`` with the actual path where the {+driver-short+} source tree is located on your system.

CMake
-----

You can configure the {+driver-short+} by using CMake. CMake provides the ``find_package`` command, which you can use to locate external libraries if the {+driver-short+} is installed. Alternatively, you can use the advanced ``add_subdirectory`` command without installing the {+driver-short+}.

With Driver Installation
~~~~~~~~~~~~~~~~~~~~~~~~

After installing the {+driver-short+}, you can use CMake's ``find_package`` command to configure the driver. To learn how to install the {+driver-short+}, visit the following guides:

- :ref:`cpp-quick-start-download-and-install` to install from source
- :ref:`cpp-installation-advanced` to install from packages

To use the ``find_package`` command, create a ``CMakeLists.txt`` file in your project directory. The following example creates a ``CMakeLists.txt`` file in the ``/home/user/project1`` project directory that uses ``find_package``:

.. literalinclude:: /includes/cmake_with_driver_installation.txt
  :caption: /home/user/project1/CMakeLists.txt
  :start-after: -- sphinx-include-start --

Then, you can build and run your project. Depending on your particular environment, you may need to specify additional options to the following CMake command. For instance, if your compiler does not default to at least C++17, use the ``-DCMAKE_CXX_STANDARD=17`` CMake option. If you installed the driver to a non-standard location, you may need to specify the ``-DCMAKE_PREFIX_PATH=/<path-to-mongo-cxx-driver-installation>`` option. The execution should resemble the following code:

.. code-block:: none

   $ cd /home/user/project1
   $ cmake -Bbuild
   -- The CXX compiler identification is GNU 14.2.0
   -- Detecting CXX compiler ABI info
   -- Detecting CXX compiler ABI info - done
   -- Check for working CXX compiler: /usr/bin/c++ - skipped
   -- Detecting CXX compile features
   -- Detecting CXX compile features - done
   -- Performing Test CMAKE_HAVE_LIBC_PTHREAD
   -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
   -- Found Threads: TRUE
   -- Configuring done (0.3s)
   -- Generating done (0.0s)
   -- Build files have been written to: /home/user/project1/build
   $ cmake --build build
   [ 50%] Building CXX object CMakeFiles/view_and_value.dir/<path-to-mongo-cxx-driver-sources>/examples/bsoncxx/view_and_value.cpp.o
   [100%] Linking CXX executable view_and_value
   [100%] Built target view_and_value
   $ ./build/view_and_value
   { "team" : "platforms", "id" : { "$oid" : "66f4be6fef9eb8b9240619f0" }, "members" : [ "tyler", "jason", "drew", "sam", "ernie", "john", "mark", "crystal" ] }
   Got key, key = team
   Got String!
   Got key, key = id
   Got ObjectId!
   Got key, key = members
   Got Array!
   array element: tyler
   array element: jason
   array element: drew
   array element: sam
   array element: ernie
   array element: john
   array element: mark
   array element: crystal
   as expected, we have a team
   document has 3 keys.
   document keys are:
   team
   id
   members


Without Driver Installation
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Alternatively, you can use CMake's ``add_subdirectory`` command without installing the {+driver-short+}. This is an advanced technique that, unlike the  ``find_package`` command, does not support specifying version constraints.

.. note::

   You may need to adjust build flags for your project to 
   accommodate this approach. You must include any flags or
   options that you would have passed to the {+driver-short+} during installation.

To use the ``add_subdirectory`` command, create a ``CMakeLists.txt`` file in your project directory. The following example creates a ``CMakeLists.txt`` file in the ``/home/user/project2`` project directory that uses ``add_subdirectory``:

.. literalinclude:: /includes/cmake_without_driver_installation.txt
  :caption: /home/user/project2/CMakeLists.txt
  :start-after: -- sphinx-include-start --

Note that in this approach the CMake target is referred to simply as ``bsoncxx_shared``, without the ``mongo::`` namespace. The namespace is added as part of the CMake module installation, which is not performed in this approach.

Then, you can build and run your project. The following code shows a truncated example of the CMake output:

.. code-block:: none

   $ cmake -Bbuild
   $ cmake --build build
   $ ./build/view_and_value 
   { "team" : "platforms", "id" : { "$oid" : "67207dcf532837a4470cc090" }, "members" : [ "tyler", "jason", "drew", "sam", "ernie", "john", "mark", "crystal" ] }
   Got key, key = team
   Got String!
   Got key, key = id
   Got ObjectId!
   Got key, key = members
   Got Array!
   array element: tyler
   array element: jason
   array element: drew
   array element: sam
   array element: ernie
   array element: john
   array element: mark
   array element: crystal
   as expected, we have a team
   document has 3 keys.
   document keys are: 
   team 
   id 
   members

pkg-config
----------

If your project is not CMake-based, you can ``pkg-config`` to integrate the {+driver-short+} with your project. Because ``pkg-config`` provides less flexibility than CMake, we recommend avoiding this approach when possible.

You can only use the {+driver-short+} with ``pkg-config`` if you fully install the driver. 

The following code uses ``pkg-config`` to configure the driver. Replace the ``/<path-to-mongo-cxx-driver-sources>`` placeholder with your installation path:

.. code-block:: none

   $ c++ /<path-to-mongo-cxx-driver-sources>/examples/bsoncxx/view_and_value.cpp $(pkg-config --cflags libbsoncxx) -I/<path-to-mongo-cxx-driver-sources> $(pkg-config pkg-config --libs libbsoncxx) -o view_and_value
   $ ./view_and_value 
   { "team" : "platforms", "id" : { "$oid" : "67207262672b96dc3b0fc150" }, "members" : [ "tyler", "jason", "drew", "sam", "ernie", "john", "mark", "crystal" ] }
   Got key, key = team
   Got String!
   Got key, key = id
   Got ObjectId!
   Got key, key = members
   Got Array!
   array element: tyler
   array element: jason
   array element: drew
   array element: sam
   array element: ernie
   array element: john
   array element: mark
   array element: crystal
   as expected, we have a team
   document has 3 keys.
   document keys are: 
   team 
   id 
   members

You can adapt the preceding command line for more complex projects or specific build systems depending on how they consume ``pkg-config`` packages.
