.. _cpp-specify-documents-to-return:

===========================
Specify Documents to Return
===========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: read, paginate, pagination, order, code example

Overview
--------

In this guide, you can learn how to specify which documents to return from a read
operation by using the following methods:

- ``limit()``: Specifies the maximum number of documents to return from a query.
- ``sort()``: Specifies the sort order for the returned documents.
- ``skip()``: Specifies the number of documents to skip before returning query results.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants`` collection
from the :atlas:`Atlas sample datasets </sample-data>`. To access this collection
from your C++ application, instantiate a ``client`` that connects to an Atlas cluster
and assign the following values to your ``db`` and ``collection`` variables:

.. literalinclude:: /includes/read/limit-skip-sort.cpp
    :language: cpp
    :dedent:
    :start-after: start-db-coll
    :end-before: end-db-coll

To learn how to create a free MongoDB Atlas cluster and load the sample datasets, see
the :ref:`<cpp-get-started>` tutorial.

.. _cpp-return-documents-limit:

Limit
-----

To specify the maximum number of documents returned from a read operation, create
an instance of the ``mongocxx::options::find`` class and set its ``limit`` field.
Then, pass your ``mongocxx::options::find`` instance as a parameter to the
``find()`` method.

The following example finds all restaurants that have a ``cuisine`` field value
of ``"Italian"`` and limits the results to ``5`` documents:

.. io-code-block::

   .. input:: /includes/read/limit-skip-sort.cpp
      :start-after: start-limit-method
      :end-before: end-limit-method
      :language: cpp
      :dedent:

   .. output::

      { "_id" : { "$oid" : "..." }, ..., "name" : "Philadelphia Grille Express", "restaurant_id" : "40364305" }
      { "_id" : { "$oid" : "..." }, ..., "name" : "Isle Of Capri Restaurant", "restaurant_id" : "40364373" }
      { "_id" : { "$oid" : "..." }, ..., "name" : "Marchis Restaurant", "restaurant_id" : "40364668" }
      { "_id" : { "$oid" : "..." }, ..., "name" : "Crystal Room", "restaurant_id" : "40365013" }
      { "_id" : { "$oid" : "..." }, ..., "name" : "Forlinis Restaurant", "restaurant_id" : "40365098" }

.. tip::

   The preceding example returns the first five documents matched by the query
   according to their :manual:`natural order </reference/glossary/#std-term-natural-order>`
   in the database. The following section describes how to return the documents
   in a specified sort order.

.. _cpp-return-documents-sort:

Sort
----

To return documents in a specified order, create an instance of the ``mongocxx::options::find``
class and set its ``sort`` field. Then, pass your ``mongocxx::options::find`` instance as a
parameter to the ``find()`` method.


To set the ``sort`` field, call the ``sort()`` setter method on your ``mongocxx::options::find``
instance and pass a document as a parameter. In this document, specify the field to sort the
results by and the sort direction. A value of ``1`` sorts values from lowest to highest, and a value
of ``-1`` sorts them from highest to lowest.

The following example returns all documents that have a ``cuisine`` value of ``"Italian"``,
sorted in ascending order of ``name`` field values:

.. io-code-block::

   .. input:: /includes/read/limit-skip-sort.cpp
      :start-after: start-sort-method
      :end-before: end-sort-method
      :language: cpp
      :dedent:

   .. output::

      { "_id" : { "$oid" : "..." }, ..., "name" : "(Lewis Drug Store) Locanda Vini E Olii", "restaurant_id" : "40804423" }
      { "_id" : { "$oid" : "..." }, ..., "name" : "101 Restaurant And Bar", "restaurant_id" : "40560108" }
      { "_id" : { "$oid" : "..." }, ..., "name" : "44 Sw Ristorante & Bar", "restaurant_id" : "40698807" }
      ...
      { "_id" : { "$oid" : "..." }, ..., "name" : "Zucchero E Pomodori", "restaurant_id" : "41189590" }

.. _cpp-return-documents-skip:

Skip
----

To skip a specified number of documents before returning your query results, create
an instance of the ``mongocxx::options::find`` class and set its ``skip`` field.
Then, pass your ``mongocxx::options::find`` instance as a parameter to the
``find()`` method.

The following example returns all documents that have a ``borough`` field value
of ``"Manhattan"`` and skips the first ``10`` documents:

.. io-code-block::

   .. input:: /includes/read/limit-skip-sort.cpp
      :start-after: start-skip
      :end-before: end-skip
      :language: python

   .. output::

      Dorrian'S Red Hand Restaurant
      The Princeton Club
      Moran'S Chelsea
      La Parisienne Diner
      Jimmy'S Corner
      ...

.. _cpp-return-documents-combine:

Combine Limit, Sort, and Skip
-----------------------------

You can set the ``limit``, ``sort``, and ``skip`` fields of a single
``mongocxx::options::find`` instance. This allows you to set a maximum
number of sorted documents to return, skipping a specified number of
documents before returning.

The following example returns documents with the ``cuisine`` value of
``"Italian"``. The results are sorted in alphabetical order, skipping the first
10 documents:

.. io-code-block::

   .. input:: /includes/read/limit-skip-sort.cpp
      :start-after: start-limit-sort-skip
      :end-before: end-limit-sort-skip
      :language: python

   .. output::
      
      Acqua
      Acqua Restaurant
      Acqua Santa
      Acquista Trattoria
      Acquolina Catering

.. note::

   The order in which you call these methods doesn't change the documents
   that are returned. The driver automatically reorders the calls to perform the
   sort and skip operations first, and the limit operation afterward.

Additional Information
----------------------

For more information about retrieving documents, see the :ref:`cpp-retrieve` guide.

.. TODO:
 For more information about specifying a query, see the :ref:`cpp-specify-query` guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `find() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#ada76e1596a65c7615e7af7d34a8140d6>`__
- `limit() <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1find.html#aa8245eed102202a625dab67047903738>`__
- `sort() <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1find.html#a39e497bf0c084d9ddb1ccc68edee4b3a>`__
- `skip() <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1find.html#a7f5688e726d8c460d016e5007a47e001>`__
