.. _cpp-transactions:

============
Transactions
============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, rollback, undo operation

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to perform
**transactions**. Transactions allow
you to run a series of operations that do not change any data until the
transaction is committed. If any operation in the transaction returns an
error, the driver cancels the transaction and discards all data changes
before they ever become visible.

In MongoDB, transactions run within logical **sessions**. A
session is a grouping of related read or write operations that you intend to run sequentially. 
Sessions enable causal consistency for a group of operations 
or allow you to execute operations in an ACID transaction. MongoDB
guarantees that the data involved in your transaction operations remains
consistent, even if the operations encounter unexpected errors.

When using the {+driver-short+}, you can create a new session from a
``mongocxx::client`` instance as a ``mongocxx::client_session`` type. We recommend that you reuse
your client for multiple sessions and transactions instead of
instantiating a new client each time.

.. warning::

   Use a ``mongocxx::client_session`` only with the ``mongocxx::client`` (or associated
   ``mongocxx::database`` or ``mongocxx::collection``) that created it. Using a
   ``client_session`` with a different ``client`` results in operation
   errors.

.. warning::
   
   Implementations of ``mongocxx::client_session`` are not thread-safe for concurrent use by multiple threads.

Methods
-------

After you start a session by using the ``start_session()`` method, you can modify
the session state by using the method set provided by the ``mongocxx::client_session`` interface. The
following table describes these methods:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Method
     - Description

   * - ``start_transaction()``
     - | Starts a new transaction, configured with the given options, on
         the current client session. Returns an error if there is already
         a transaction in progress for the session. To learn more about
         this method, see the :manual:`startTransaction() page
         </reference/method/Session.startTransaction/>`  in the Server manual.
       |
       | **Parameter Type**:  **Optional**. ``mongocxx::options::transaction``

   * - ``abort_transcaction()``
     - | Ends the active transaction for this session. Returns an
         error if there is no active transaction for the session or the
         transaction has been committed or ended. To learn more about
         this method, see the :manual:`abortTransaction() page
         </reference/method/Session.abortTransaction/>`  in the Server manual.
       |
       | **Parameter Type**: ``Context``

   * - ``commit_transaction()``
     - | Commits the active transaction for this session. Returns an
         error if there is no active transaction for the session or if the
         transaction was ended. To learn more about
         this method, see the :manual:`commitTransaction() page
         </reference/method/Session.commitTransaction/>`  in the Server manual. 
       |
       | The ``CommitTransaction()`` method is an idempotent function, which 
         means that you can attempt to commit a transaction multiple times without changing data after the first successful commit. 
         A transaction can succeed but return an error with the 
         ``UnknownTransactionCommitResult`` label. If you rerun the
         ``CommitTransaction()`` method after receiving this error,
         your data is not changed by the repeat attempts.

       |
       | **Parameter Type**: ``Context``

   * - ``with_transaction()``
     - | Starts a transaction on this session and runs the ``fn``
         callback.
       |
       | **Parameter Types**: ``callback``, ``transaction_opts``

   * - ``~client_session()``
     - | Destructor for the ``mongocxx::client_session`` class. Ends any existing transactions and closes the session.
       |
       | **Parameter Type**: ``Context``

The ``Session`` interface also has methods to retrieve session
properties and modify mutable session properties. Find more information
in the :ref:`API documentation <api-docs-transaction>`.

Example
-------

The following example shows how you can create a session, create a
transaction, and commit a multi-document insert operation through the
following steps:

1. Create a session from the client using the ``start_session()`` method.
#. Create a callback function with the series of operations you want to 
run in your transaction. 
#. Define any options you want to add to your transaction. 
#. Call the ``with_transactions()`` method and pass in your callback function and 
options to start a transaction. The ``with_transactions()`` method executes and 
commits the transaction. If any operation results in 
errors, ``with_transactions()`` handles canceling the transaction.
#. Return from your operation. This will automatically call the ``~end_session()`` 
destructor to close the transaction and client session. 

.. literalinclude:: /includes/usage-examples/transactions.cpp
   :language: cpp
   :dedent:
   :start-after: start-session
   :end-before: end-session

If you require more control over your transactions, you can find an example
showing how to manually create, commit, and end transactions in the
`full code example <https://raw.githubusercontent.com/mongodb/docs-golang/{+docs-branch+}/source/includes/fundamentals/code-snippets/transaction.go>`__.

Additional Information
----------------------

To learn more about the concepts discussed in this guide, see the following pages in the 
Server manual: 

- :manual:`Transactions </core/transactions/>`
- :manual:`session </reference/server-sessions/>`
- :manual:`causal consistency </core/read-isolation-consistency-recency/#causal-consistency>`

To learn more about ACID complicance, see the :website:`ACID Properties in Database Management Systems </basics/acid-transactions>`
guide on the MongoDB website. 

For more information about insert operations, see the
:ref:`Insert <cpp-write-insert>` guide page.

.. _api-docs-transaction:

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the types or methods discussed in this
guide, see the following API Documentation:

- `mongocxx::client <{+api+}/classmongocxx_1_1client.html>`__
- `mongocxx::client_session <{+api+}/mongocxx-3.3.2/classmongocxx_1_1client__session.html>`__
- `start_session() <{+api+}/classmongocxx_1_1v__noabi_1_1client.html#a03535128dbe5be973a08764b7741f24e>`__
- `start_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#a84ea5613813e6efbe065e3f39e1f972b>`__
- `abort_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#aabb8247a655741af6fe0f78bef8116e1>`__
- `commit_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#ad2d1a8f7c77542db6ec7629d162761ff>`__
- `with_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#a3dcdf91bf72e69bf7e63a7c8ad859b93>`__
- `insert_one() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#af040f1fcb1ac406037bf1cbcdb300061>`__
- `insert_many() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a61ebaa0c63296761637ce45115512085>`__