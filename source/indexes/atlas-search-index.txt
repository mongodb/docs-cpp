.. _cpp-atlas-search-index:

====================
Atlas Search Indexes
====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: index, query, text search, efficiency

Overview
--------

The MongoDB Atlas Search feature enables you to perform full-text
searches on collections hosted on Atlas. Before you can perform Atlas
Search queries, you must create indexes that specify which
fields to index and how they are indexed.

To learn more about Atlas Search, see the :atlas:`Atlas Search Overview
</atlas-search/atlas-search-overview/>`.

You can use the following methods on a ``mongocxx::search_index_view`` instance
to manage your Atlas Search indexes:

- ``create_one()``
- ``create_many()``
- ``list()``
- ``update_one()``
- ``drop_one()``

To get a ``search_index_view`` to your collection, 
call the ``search_indexes()`` method on your ``mongocxx::collection`` instance.

.. note:: Atlas Search Index Management is Asynchronous

   The {+php-library+} manages Atlas Search indexes asynchronously. The
   library methods described in the following sections return the server
   response immediately, but the changes to your Search indexes take
   place in the background and might not complete until some time later.

The following sections provide code examples that demonstrate how to use
each Atlas Search index management method.

.. _cpp-atlas-search-index-create:

Create a Search Index
---------------------

To create a single Atlas Search Index on a collection, call the ``create_one()`` method 
on a ``mongocxx::search_index_view`` instance. The ``create_one()`` method requires the following parameters:

- ``name``, a string that specifies the name for your search index
- ``mappings``, a document that specifies how to index fields at different paths for this index. For a full list of ``mappings`` fields, 
  see the :atlas:`Atlas Search Index Syntax </atlas-search/index-definitions/>` guide in the Atlas documentation. 

After you create a Search index, you can perform Atlas Search queries on
your collection. To learn more, see :atlas:`Create and Run Atlas Search
Queries </atlas-search/searching/>` in the Atlas documentation.

.. _cpp-atlas-search-index-create-static:

Create a Search Index with Static Mappings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use static mappings to configure index options for fields that you don't want indexed dynamically, or to configure a single field independently from others in an index.

To create a single Atlas Search index with static mappings, call the ``create_one()`` method with ``mappings.dynamic`` set to ``false`` and specify the fields you want to index in ``mappings.fields``. To learn more about static mappings, 
see the :atlas:`Define Field Mappings </atlas-search/define-field-mappings/>` guide in the Atlas documentation. 

The following example shows how to create a single Atlas Search index with static mappings: 

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/indexes.cpp
      :start-after: start-create-static-search-index
      :end-before: end-create-static-search-index
      :language: cpp
      :dedent:
   
   .. output:: 
      :language: cli
      :visible: false
      
      New index name: myDynamicIndex

.. _cpp-atlas-search-index-create-dynamic:

Create a Search Index with Dynamic Mappings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use dynamic mappings if your schema changes regularly or is unknown, or when experimenting with Atlas Search. 

To create a single Atlas Search index with dynamic mappings, call the ``create_one()`` method and set ``mappings.dynamic`` to ``true``. This tells Atlas Search to 
recursively index the fields of supported types in each document. For a list of BSON data types that are not dynamically indexable, see the Data Types 
section of the Atlas Define Field Mappings guide. 

The following example shows how to to create a single Atlas Search index with dynamic mappings:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/indexes.cpp
      :start-after: start-create-dynamic-search-index
      :end-before: end-create-dynamic-search-index
      :language: cpp
      :dedent:
   
   .. output:: 
      :language: cli
      :visible: false
      
      New index name: myStaticIndex

.. _cpp-atlas-search-index-create-multiple:

Create Multiple Atlas Search Indexes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To create multiple Atlas Search indexes, call the ``create_many()`` method and pass in a vector of the
search index models to create. 

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/indexes.cpp
      :start-after: start-create-multiple-search-indexes
      :end-before: end-create-multiple-search-indexes
      :language: cpp
      :dedent:
   
   .. output:: 
      :language: cli
      :visible: false
      
      New index names:
      myDynamicIndex
      myStaticIndex

.. _cpp-atlas-search-index-list:

List Search Indexes
-------------------

To return a cursor to the list of Atlas Search indexes on a collection, call the ``list()`` method. You can pass in the name of 
an index you would like to list or pass in nothing to list all Atlas Search indexes on a collection. 

The following example shows how to return a cursor to the index named ``myDyanmicIndex`` 
created in the :ref:`Create a Search Index with Dynamic Mappings <cpp-atlas-search-index-create-dynamic>` section. 

.. literalinclude:: /includes/indexes/indexes.php
   :language: php
   :dedent:
   :copyable: true
   :start-after: start-list-search-indexes
   :end-before: end-list-search-indexes


The following code uses the cursor returned by ``list()`` in the above example to print the indexes created by the 
example code in the :ref:`Create Multiple Atlas Search Indexes <cpp-atlas-search-index-create-multiple>` section: 

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/indexes.cpp
      :start-after: start-list-search-indexes-output
      :end-before: end-list-search-indexes-output
      :language: cpp
      :dedent:

   .. output:: 
      :language: cli
      :visible: false
      

      { "id" :..., "name" : "myDynamicIndex", "type" : "search",...}
      { "id" :..., "name" : "myStaticIndex", "type" : "search",...}

.. _php-atlas-search-index-update:

Update a Search Index
---------------------

You can use the ``updateSearchIndex()``
method to update an Atlas Search index. You can use this method to
change the name of a Search index or change the configuration of the
index.

The following code shows how to update a search index to use a simple
analyzer on the ``title`` field:

.. literalinclude:: /includes/indexes/indexes.php
   :language: php
   :dedent:
   :start-after: start-update-search-indexes
   :end-before: end-update-search-indexes

.. _php-atlas-search-index-drop:

Delete a Search Index
---------------------

You can use the ``dropSearchIndex()`` method to remove an Atlas Search
index from a collection.

The following code shows how to delete the Atlas Search index named
``mySearchIdx``:

.. literalinclude:: /includes/indexes/indexes.php
   :language: php
   :dedent:
   :start-after: start-delete-search-index
   :end-before: end-delete-search-index

Additional Information
----------------------

To view runnable examples that demonstrate how to manage indexes, see
:ref:`php-indexes`.

To view tutorials that explain how to use the Atlas Search feature, see the
:atlas:`Get Started with Atlas Search </atlas-search/tutorial/>` gudie.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods discussed in this guide, see the
following API documentation:

- ``create_one()``
- ``create_many()``
- ``list()``
- ``update_one()``
- ``drop_one()``
- search_indexes()
- `search_index_view.create_one() <{+api+}/classmongocxx_1_1v__noabi_1_1search__index__view.htmll#a5b564dda9e19d0bc69a3f77ea0df7e8e>`__