.. _cpp-atlas-search-index:

====================
Atlas Search Indexes
====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: index, query, text search, efficiency

Overview
--------

The MongoDB Atlas Search feature enables you to perform full-text
searches on collections hosted on Atlas. Before you can perform Atlas
Search queries, you must create indexes that specify which
fields to index and how they are indexed.

To learn more about Atlas Search, see the :atlas:`Atlas Search Overview
</atlas-search/atlas-search-overview/>`.

You can use the following methods on a ``mongocxx::search_index_view`` instance
to manage your Atlas Search indexes:

- ``create_one()``
- ``create_many()``
- ``list()``
- ``update_one()``
- ``drop_one()``

To get a ``search_index_view`` to your collection, 
call the ``search_indexes()`` method on your ``mongocxx::collection`` instance.

.. note:: Atlas Search Index Management is Asynchronous

   The {+driver-long+} manages Atlas Search indexes asynchronously. The
   library methods described in the following sections return the server
   response immediately, but the changes to your Search indexes take
   place in the background and might not complete until some time later.

The following sections provide code examples that demonstrate how to use
each Atlas Search index management method.

.. _cpp-atlas-search-index-create:

Create a Search Index
---------------------

To create a single Atlas Search Index on a collection, call the ``create_one()`` method on a ``mongocxx::search_index_view`` instance and pass in a ``mongoxcc::search_index_model`` 
instance specifying the Search index you want to create. 

A ``mongocxx::search_index_model`` instance requires the following fields:

- ``name``, a string specifying the name for your search index
- ``definition``, a document containing the ``mappings`` field, which specifies how how to configure fields in your search index

.. tip:: 

   For a full list of fields you can configure in an Atlas Search index, see the :atlas:`Review Atlas Search Index Syntax </atlas-search/index-definitions/>` guide in the Atlas Search Documentation.

After you create a Search index, you can perform Atlas Search queries on
your collection. To learn more, see :atlas:`Create and Run Atlas Search
Queries </atlas-search/searching/>` in the Atlas Search Documentation.

The following sections show how to create a single Atlas Search index with static or dynamic mappings. 

.. _cpp-atlas-search-index-create-static:

Create a Search Index with Static Mappings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use static mappings in your Atlas Search index to specify the fields you want to index and configure index options for individual fields.

To create a single Atlas Search index with static mappings, call the ``create_one()`` method and set ``mappings.dynamic`` to ``false``. You must specify
the names and configurations for the fields you want to index in ``mappings.fields``. 

The following example shows how to create a single Atlas Search index with static mappings: 

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/indexes.cpp
      :start-after: start-create-static-search-index
      :end-before: end-create-static-search-index
      :language: cpp
      :dedent:
   
   .. output:: 
      :language: cli
      :visible: false
      
      New index name: myStaticIndex

.. important:: 

   You can't index fields that contain the dollar (``$``) sign at the start of the field name.

To learn more about when to use static mappings, see the :atlas:`Static Mappings </atlas-search/define-field-mappings/#static-mappings>` section in the Atlas Search Documentation.

.. _cpp-atlas-search-index-create-dynamic:

Create a Search Index with Dynamic Mappings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use dynamic mappings in your Atlas Search index to automatically index all fields of supported types.
For a list of supported BSON data types, see the :atlas:`Data Types </atlas-search/define-field-mappings/#data-types>` section in the Atlas Search documentation. 

To create a single Atlas Search index with dynamic mappings, call the ``create_one()`` method and set ``mappings.dynamic`` to ``true``. 

The following example shows how to to create a single Atlas Search index with dynamic mappings:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/indexes.cpp
      :start-after: start-create-dynamic-search-index
      :end-before: end-create-dynamic-search-index
      :language: cpp
      :dedent:
   
   .. output:: 
      :language: cli
      :visible: false
      
      New index name: myDynamicIndex

To learn more about when to use dynamic mappings, see the :atlas:`Dynamic Mappings </atlas-search/define-field-mappings/#dynamic-mappings>` section in the Atlas Search documentation.

.. _cpp-atlas-search-index-create-multiple:

Create Multiple Search Indexes
------------------------------

To create multiple Atlas Search indexes, call the ``create_many()`` method on a ``mongocxx::search_index_view`` instance
and pass in a vector of ``mongocxx::search_index_model`` instances specifying the Atlas Search indexes you want to create. 

The following example shows how to create multiple Atlas Search indexes:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/indexes.cpp
      :start-after: start-create-multiple-search-indexes
      :end-before: end-create-multiple-search-indexes
      :language: cpp
      :dedent:
   
   .. output:: 
      :language: cli
      :visible: false
      
      New index names:
      myDynamicIndex
      myStaticIndex

.. _cpp-atlas-search-index-list:

List Search Indexes
-------------------

To list the Atlas Search indexes on a collection, call the ``list()`` method on a ``mongocxx::search_index_view`` instance. This returns a ``mongocxx::cursor`` instance that you can
use to iterate over Search indexes. 

The following example prints a list of Search indexes by iterating over a ``cursor::iterator`` 
that points to the Search indexes from :ref:`Create Multiple Atlas Search Indexes <cpp-atlas-search-index-create-multiple>`: 

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/indexes.cpp
      :start-after: start-list-search-indexes
      :end-before: end-list-search-indexes
      :language: cpp
      :dedent:

   .. output:: 
      :language: cli
      :visible: false

      { "id" : ..., "name" : "myDynamicIndex", "type" : "search", ...,
        "latestDefinition" : { "mappings" : { "dynamic" : true } }, ...} 

      { "id" : ..., "name" : "myStaticIndex", "type" : "search", ...,
        "latestDefinition" : { "mappings" : { "dynamic" : false, "fields" : { "title" : { "type" : "string", "analyzer" : "lucene.standard" }, "year" : { "type" : "number" } } } }, ...} 

Alternatively, you can list a specific Search index by passing an index name into the ``list()`` method. 
This returns a ``mongocxx::cursor`` that points to a result set containing only the specified index. 

The following example uses the ``list()`` method to print an index with the name ``myDynamicIndex``:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/indexes.cpp
      :start-after: start-list-search-index
      :end-before: end-list-search-index
      :language: cpp
      :dedent:

   .. output:: 
      :language: cli
      :visible: false
      
      { "id" : ..., "name" : "myDynamicIndex", "type" : "search", ...,
        "latestDefinition" : { "mappings" : { "dynamic" : true } }, ...} 

.. _cpp-atlas-search-index-update:

Update a Search Index
---------------------

To update an Atlas Search index, call the ``update_one()`` method on a ``mongocxx::search_index_view`` instance and pass in the name of the search index 
you want to update and the definition to update the search index to.

The following example shows how to update the Search index from :ref:`Create a Search Index with Static Mappings <cpp-atlas-search-index-create-static>` to use a simple 
analyzer on the ``title`` field: 

.. literalinclude:: /includes/indexes/indexes.cpp
   :language: cpp
   :dedent:
   :start-after: start-update-search-index
   :end-before: end-update-search-index

.. _cpp-atlas-search-index-drop:

Remove a Search Index
---------------------

To remove an Atlas Search index from a collection, call the ``drop_one()`` method on a ``mongocxx::search_index_view`` instance and pass in 
the name of the Search index you want to remove. 

The following example shows how to remove an Atlas Search index named ``myDynamicIndex``: 

.. literalinclude:: /includes/indexes/indexes.cpp
   :language: cpp
   :dedent:
   :start-after: start-remove-search-index
   :end-before: end-remove-search-index

Additional Information
----------------------

To view runnable examples that demonstrate how to manage indexes, see :ref:`cpp-indexes`.

For more detailed guides on how to use the Atlas Search feature and define Atlas Search indexes,
see the following Atlas Search Documentation pages: 

- :atlas:`Get Started with Atlas Search </atlas-search/tutorial/>`
- :atlas:`Create and Run Atlas Search Queries </atlas-search/searching/>`
- :atlas:`Create an Atlas Search Index </atlas-search/create-index/>` 
- :atlas:`Define Field Mappings </atlas-search/define-field-mappings/>`
- :atlas:`Review Atlas Search Index Syntax </atlas-search/index-definitions/>`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the methods discussed in this guide, see the
following API documentation:

- `search_indexes() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a1ff18a94afc676f1d85f4aa9570e9c0f>`__
- `create_one() <{+api+}/classmongocxx_1_1v__noabi_1_1search__index__view.html#a980873272536347345ef68cc2d5d7408>`__
- `create_many() <{+api+}/classmongocxx_1_1v__noabi_1_1search__index__view.html#aad93b8f9fe525bf7c133d4408f5d1e5f>`__
- `list() <{+api+}/classmongocxx_1_1v__noabi_1_1search__index__view.html#a54caee8c3c16ad099d823270086dceef>`__
- `drop_one() <{+api+}/classmongocxx_1_1v__noabi_1_1search__index__view.html#a184088ce06247b26c44c3c0d2ee8b99b>`__
- `update_one() <{+api+}/classmongocxx_1_1v__noabi_1_1search__index__view.html#aec3f5a861d36d573c8489d8e488597c8>`__