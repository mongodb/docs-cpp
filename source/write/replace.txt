.. _cpp-write-replace:

=================
Replace Documents
=================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: modify, change, bulk, code example

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to run a replace operation on a MongoDB collection.
A replace operation removes *all* fields in the target document and replaces them with new ones.
You can call the ``replace_one()`` method to replace a single document.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``restaurants`` collection in the ``sample_restaurants``
database from the :atlas:`Atlas sample datasets </sample-data>`. To access this collection
from your C++ application, instantiate a ``mongocxx::client`` that connects to an Atlas cluster
and assign the following values to your ``db`` and ``collection`` variables:

.. literalinclude:: /includes/write/replace.cpp
    :start-after: start-db-coll
    :end-before: end-db-coll
    :language: cpp
    :dedent:

To learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the
:atlas:`Get Started with Atlas </getting-started>` guide.

Replace Operation
-----------------

You can perform a replace operation by calling the ``replace_one()`` method.
This method removes all fields except the ``_id`` field from the first document that
matches the search criteria. It then inserts the fields and values you specify into the document. 

Each replace method requires the following parameters:

- **Query filter** document: Specifies which document to replace. For
  more information about query filters, see the 
  :manual:`Query Filter Documents section </core/document/#query-filter-documents>` in
  the {+mdb-server+} manual.

- **Replace** document: Specifies the fields and values to insert in the new document. 

Replace One Document Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example uses the ``replace_one()`` method to replace the fields and values
of a document in which the ``name`` field value is ``Bagels N Buns``:

.. literalinclude:: /includes/write/replace.cpp
   :start-after: start-replace-one
   :end-before: end-replace-one
   :language: cpp
   :dedent:


Options 
~~~~~~~

You can modify the behavior of the ``replace_one()`` method by
passing an instance of the ``mongocxx::options::replace`` class as an optional
parameter. This class contains the following member functions:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Function 
     - Description

   * - ``bypass_document_validation(<bool bypass_document_validation>)``
     - | Specifies whether the replace operation bypasses document validation. Accepts a boolean value as its argument. 
       | When set to ``true``, this lets you replace a document with a new document that doesn't meet the schema validation requirements. 
       | For more information, see :manual:`Schema Validation </core/schema-validation/#schema-validation>` in the {+mdb-server+} manual.
       | Defaults to ``false``.

   * - ``collation(<document::view_or_value collation>)``
     - | Specifies the kind of language collation to use when sorting
         results. Accepts a :manual:`collation document </reference/collation/#collation-document>` as its argument.
       | For more information, see :manual:`Collation </reference/collation/#std-label-collation>`
         in the {+mdb-server+} manual.

   * - ``comment(<bson_value::view_or_value comment>)``
     - | Specifies a comment to attach to the operation. Accepts a comment of any valid BSON type as its argument (string, integer, object, array, etc).
       | Once set, this comment appears alongside records of this command in the following locations:
         - mongod log messages, in the attr.command.cursor.comment field.
         - Database profiler output, in the command.comment field.
         - currentOp output, in the command.comment field. 
       | For more information, see the :manual:`insert command
         fields </reference/command/insert/#command-fields>` guide in the
         {+mdb-server+} manual. 

   * - ``hint``
     - | Specifies the index to search for the **Query Filter** document. Accepts as its argument an instance of the mongocxx::v_noabi::hint class representing an
         index name.
       | For more information, see the :manual:`hint statement </reference/command/update/#std-label-update-command-hint>`
         in the {+mdb-server+} manual.

   * - ``let``
     - | Specifies variables and their values to be used in the ``replace_one()`` method. 
         Accepts as its argument a document containing variable-value pairs. To access the value of a variable in the method, 
         use the double dollar sign prefix ($$) together with your variable name in the form ``$$<variable-name>``. 
       | This allows you to improve command readability by separating 
         the variables from the query text.
       | For more information, see :manual:`let 
         </reference/command/update/#std-label-replace-let-syntax>` in the
         {+mdb-server+} manual.

   * - ``upsert``
     - | Specifies whether the replace operation performs an upsert operation if no 
         documents match the query filter. Accepts a boolean value as its argument. 
       | Defaults to ``false``.

   * - ``write_concern``
     - | Sets the write concern for the operation.
       | For more information, see :manual:`Write Concern </reference/write-concern/>`
         in the {+mdb-server+} manual.

Examples 
^^^^^^^^

The following code uses the ``replace_one()`` function with an ``upsert`` option set to ``true``
to insert a new document with a ``name`` value of ``Shake Shack`` into the ``sample_restaurants.restaurants`` collection 
when its search for a document with a ``name`` value of ``In-N-Out Burger`` 
does not match an existing document: 
 
.. The following code uses the ``replace_one()`` method to find a document with a ``name`` value of 
.. ``In-N-Out Burger`` and replace it with a new document with a ``name`` value of ``Shake Shack``.
.. Because the ``upsert`` option is set to ``true`` and the ``sample_restaurants.restaurants`` collection 
.. does not contain a document with a ``name`` value of ``In-N-Out Burger``,
.. the {+driver-short+} inserts a new document into the collection when the operation can not find
.. an existing document with a ``name`` value of ``In-N-Out Burger``.  than replacing an existing document: 

.. literalinclude:: /includes/write/replace.cpp
   :start-after: start-replace-options-upsert
   :end-before: end-replace-options-upsert
   :language: cpp
   :dedent:


The following code uses the ``hint`` option to optimize query performance when performing a replace operation. 

.. literalinclude:: /includes/write/replace.cpp
   :start-after: start-replace-options-hint
   :end-before: end-replace-options-hint
   :language: cpp
   :dedent:

The above code uses :ref:`create_index() <cpp-indexes>` to create an ascending single-field index using the ``name`` field. 
The name of this index, ``name_1``, is then passed as an argument to the ``hint`` member function of ``opts``, an instance of the 
``mongocxx::options::replace`` class. Because ``opts`` is passed in as its third argument, the ``replace_one()`` method searches through the 
``name_1`` index for a ``name`` value of ``Nobu``. The matching document is then replaced with a new document with a ``name`` value of ``La Bernadin``. 
To learn more about indexes, see :ref:`Optimize Queries with Indexes <cpp-indexes>`.

Return Value
~~~~~~~~~~~~

The ``replace_one()`` method returns an instance of
the ``mongocxx::result::replace`` class. This class contains the following
member functions:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Function
     - Description

   * - ``matched_count()``
     - | Returns the number of documents that matched the query filter, regardless of
         how many were replaced.

   * - ``modified_count()``
     - | Returns number of documents modified by the replace operation. If a replaced
         document is identical to the original, it is not included in this
         count.
         
   * - ``result()``
     - | Returns the bulk write result for the operation.

   * - ``upserted_id()``
     - | Returns the ID of the document that was upserted in the database, if the driver
         performed an upsert.

Examples 
^^^^^^^^

.. The following example uses the ``replace_one()`` to replace the fields and values
.. of a document in which the ``name`` field value is ``Nobu`` with a new
.. document in which the ``name`` field value is ``La Bernadin``. It calls the
.. ``modified_count()`` member function to print the number of modified documents 
.. and the ``matched_documents()`` member function to print the number of matched documents: 

The following code uses the ``matched_documents()`` member functiotn to return the number of 
documents that the ``replace_one()`` method found while searching for a 
document with a ``name`` field value of ``Shake Shack``. It then uses the
``modified_documents()`` member function to print the number of documents that the ``replace_one()`` function
replaced with a new document with a ``name`` value of ``In-N-Out Burger``: 

.. io-code-block::

   .. input:: /includes/write/replace.cpp
      :start-after: start-replace-result-matched
      :end-before: end-replace-result-matched
      :language: cpp
      :dedent:

   .. output:: 

      Matched documents: 11
      Modified documents: 1

The following code uses the ``upserted_id()`` member function to return the ``_id`` field value of 
the document that the ``replace_one()`` method upserts into the database when it does not match any 
existing document with a ``name`` field value of ``In-N-Out Burger``:

.. io-code-block::

   .. input:: /includes/write/replace.cpp
      :start-after: start-replace-result-upsert
      :end-before: end-replace-result-upsert
      :language: cpp
      :dedent:

   .. output:: 

      Upserted ID: 67128c5ecc1f8c15ea26fcf8

Additional Information 
----------------------

To learn more about creating query filters, see the :ref:`cpp-specify-query` guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `replace_one() <{+api+}/classmongocxx_1_1model_1_1replace__one.html>`__
- `mongocxx::options::replace <{+api+}/classmongocxx_1_1v__noabi_1_1options_1_1replace.html>`__
- `mongocxx::result::replace <{+api+}/classmongocxx_1_1v__noabi_1_1result_1_1replace__one.html>`__