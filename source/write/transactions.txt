.. _cpp-transactions:

============
Transactions
============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, rollback, undo operation

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to perform
**transactions**. Transactions allow
you to run a series of operations that do not change any data until the
transaction is committed. If any operation in the transaction returns an
error, the driver cancels the transaction and discards all data changes
before they ever become visible.

In MongoDB, transactions run within logical **sessions**. A
session is a grouping of related read or write operations that you intend to run sequentially. 
Sessions enable causal consistency for a group of operations in an  **ACID-compliant**  transaction, which is a 
transaction that meets an expectation of atomicity, consistency, isolation, and durability. MongoDB
guarantees that the data involved in your transaction operations remains
consistent, even if the operations encounter unexpected errors.

When using the {+driver-short+}, you can create a new session from a ``mongocxx::client`` instance.
Then, you can use the resulting ``mongocxx::client_session`` instance to perform transactions. 
We recommend that you reuse your client for multiple sessions and transactions instead of
instantiating a new client each time.

.. warning::

   Use a ``mongocxx::client_session`` only with the ``mongocxx::client`` that created it. 
   Using a ``client_session`` with a different ``client`` results in operation errors.

.. warning::
   
   Instances of ``mongocxx::client`` are not thread-safe. 
   Each ``mongoxcc::client`` instance and all of its child instances, including ``mongocxx::client_session``, should be used by a single thread at a time. 
   To learn more, see the :ref:`Thread and Fork Safety <cpp-thread-safety>` page. 

Transaction APIs
----------------

The {+driver-long+} provides a callback API and a core API to manage the transaction lifestyle. 
Before you begin a transaction, you must call the ``start_session()`` method to instantiate a ``mongocxx::client_session``. 
Then, you can choose one of the following APIs to perform your transaction: 

- :ref:`Callback API <cpp-callback-api>`  
- :ref:`Core API <cpp-core-api>`  

.. _cpp-callback-api: 

Callback API 
~~~~~~~~~~~~

Use the callback API to start, execute, and commit the transaction with integrated error handling logic.  
To implement this API, call the ``with_transaction()`` method on your ``mongocxx::client_session`` and pass in a 
callback specifying the sequence of operations you want to run in your transaction. 
The ``with_transaction()`` method performs the following tasks: 

- Starts a new transaction on this client session 
- Runs the provided callback, automatically incorporating retry error handling logic for ``TransientTransactionError`` and ``UnknownTransactionCommitResult``
- Commits the transaction 

The following example shows how to use the ``with_transaction()`` method to 
start and commit a transaction that performs a multi-document insert operation: 

1. Start a session from the client using the ``start_session()`` method.
#. Define a callback specifying the series of operations that you want to 
   run in your transaction. The callback must take the current ``mongocxx::client_session`` as an argument 
   and pass it as a variable to all operations in the function body. 
#. Define any options that you want to add to your transaction. For a full list of options, 
   see the `mongocxx::options::transactions Class Reference <{+api+}/mongocxx-3.4.1/classmongocxx_1_1options_1_1transaction.html>`__ page in the API documentation. 
#. Call the ``with_transactions()`` method and pass in your callback and 
   options to start a transaction. The ``with_transactions()`` method executes and 
   commits the transaction. If any operation results in 
   errors, ``with_transactions()`` handles canceling the transaction.

.. literalinclude:: /includes/write/transactions.cpp
   :language: cpp
   :dedent:
   :start-after: start-with-transaction
   :end-before: end-with-transaction

.. tip:: 

   To learn more about ``TransientTransactionError`` and ``UnknownTransactionCommitResult``, see the :manual:`Transaction Error Handling </core/transactions-in-applications/#transaction-error-handling/>` section in the 
   {+mdb-server+} manual. 


.. _cpp-core-api: 

Core API 
~~~~~~~~

Use the core API for more manual control of the transaction lifecycle. The core API doesn't incorporate error handling logic for ``TransientTransactionError`` and ``UnknownTransactionCommitResult``,
and instead provides the flexibility to incorporate custom error handling for these errors. To learn how to handle these errors, see the :manual:`Transaction Error Handling </core/transactions-in-applications/#transaction-error-handling/>` 
section in the {+mdb-server+} manual. 

The core API requires explicit calls to start, commit, and abort the transaction using methods provided by the ``mongocxx::client_session`` interface.
The following table describes these methods:  

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Method
     - Description

   * - ``start_transaction()``
     - | Starts a new transaction on the current client session. Accepts an optional ``mongocxx::options::transaction`` 
         instance as an argument to set options including read preference, read concern, and write concern. 
       | Throws an exception an error if the options are misconfigured, if there are network or other transient failures, or if there 
         are other errors such as a session with a transaction already in progress.
       |  To learn more about this method, see the :manual:`startTransaction() page
         </reference/method/Session.startTransaction/>`  in the {+mdb-server+} manual.

   * - ``commit_transaction()``
     - | Commits the active transaction on the current client session.
       | Throws an exception if options are misconfigured, if there are network or other transient failures,
         or if there are other errors such as a session with no transaction in progress. 
       | To learn more about this method, see the :manual:`commitTransaction() page
         </reference/method/Session.commitTransaction/>`  in the {+mdb-server+} manual. 

   * - ``abort_transcaction()``
     - | Ends the active transaction on the current client session. 
       | Throws an exception if the options are misconfigured or if there are other errors such as 
         a session with no transaction in progress.
       | To learn more about this method, see the :manual:`abortTransaction() page
         </reference/method/Session.abortTransaction/>`  in the {+mdb-server+} manual.

The ``mongocxx::client_session`` class also provides methods to retrieve and modify session properties.
To learn more, see the `mongocxx::client_session Class Reference <{+api+}/classmongocxx_1_1v__noabi_1_1client.html>`__ page in the API documentation. 

The following example shows how you can use the core API to perform a transaction that executes a multi-document insert operation that incorporates 
logic to retry the transaction for transient errors and retry the commit for unknown commit error: 

1. Start a session from the client using the ``start_session()`` method.
#. Define any options that you want to add to your transaction. For a full list of options, 
   see the `mongocxx::options::transactions Class Reference <{+api+}/mongocxx-3.4.1/classmongocxx_1_1options_1_1transaction.html>`__ page in the API documentation. 
#. Call any database operations that you want to run during your transaction. You must pass in the current ``client_session`` as an argument to each operation. 
#. Commit the transaction using the ``commit_transaction()`` method

.. literalinclude:: /includes/write/transactions.cpp
   :language: cpp
   :dedent:
   :start-after: start-start-transaction
   :end-before: end-start-transaction

Transaction Error Handling
--------------------------

Additional Information
----------------------

To learn more about the concepts discussed in this guide, see the following pages in the 
{+mdb-server+} manual: 

- :manual:`Transactions </core/transactions/>`
- :manual:`Server Sessions </reference/{+mdb-server+}-sessions/>`
- :manual:`Causal Consistency </core/read-isolation-consistency-recency/#causal-consistency>`
- :manual:`Transaction Error Handling </core/transactions-in-applications/#transaction-error-handling/>`

To learn more about ACID complicance, see the :website:`ACID Properties in Database Management Systems </basics/acid-transactions>`
guide on the MongoDB website. 

To learn more about insert operations, see the
:ref:`Insert Documents <cpp-write-insert>` guide.

.. _api-docs-transaction:

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the types or methods discussed in this
guide, see the following API Documentation:

- `mongocxx::client <{+api+}/classmongocxx_1_1v__noabi_1_1client.html>`__
- `mongocxx::client_session <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html>`__
- `mongocxx::options::transaction <{+api+}/mongocxx-3.4.1/classmongocxx_1_1options_1_1transaction.html>`__
- `start_session() <{+api+}/classmongocxx_1_1v__noabi_1_1client.html#a03535128dbe5be973a08764b7741f24e>`__
- `start_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#a84ea5613813e6efbe065e3f39e1f972b>`__
- `abort_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#aabb8247a655741af6fe0f78bef8116e1>`__
- `commit_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#ad2d1a8f7c77542db6ec7629d162761ff>`__
- `with_transaction() <{+api+}/classmongocxx_1_1v__noabi_1_1client__session.html#a3dcdf91bf72e69bf7e63a7c8ad859b93>`__
- `insert_one() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#af040f1fcb1ac406037bf1cbcdb300061>`__
- `insert_many() <{+api+}/classmongocxx_1_1v__noabi_1_1collection.html#a61ebaa0c63296761637ce45115512085>`__