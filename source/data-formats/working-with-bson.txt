.. _cpp-working-with-bson:

=================
Working with BSON
=================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

Overview
--------
In this guide, you can learn how to use the {+driver-short+} to store and interact with **BSON data** using the ``bsoncxx`` library.  

BSON Data Format 
----------------

**BSON**, or Binary JSON, is the data format that MongoDB uses to store documents and make remote procedure calls.
This data format includes all JSON data structure types and adds support for types including dates, different size
integers, ObjectIds, and binary data. For a complete list of supported types, see the :manual:`BSON Types </reference/bson-types/>` page 
in the {+mdb-server+} manual. 

BSON Views and Values 
~~~~~~~~~~~~~~~~~~~~~

Many {+driver-short+} methods take a BSON document as an argument.
The ``bsoncxx`` library provides two types that represent an underlying BSON document: ``document::value``, and ``document::view``. 

BSON Document Values
~~~~~~~~~~~~~~~~~~~~

The ``document::value`` type represents a read-only BSON document that owns its underlying buffer. When
a ``document::value`` is passed into a {+driver-short+} method, the ownership of the underlying buffer is passed to the caller 
and a copy of the ``document::value`` is created and passed to the callee. When a ``document::value`` type goes out of scope, its underlying buffer is freed.

You can construct a ``document::value`` object from a builder object using the ``extract()`` method. 
After calling the ``extract()`` method on a builder, the builder is in a moved-from state and should not be used. 
The following code shows how to construct ``document::value`` objects out of the basic builder and list builder types 
described in the :ref:`Build a BSON Document <cpp-bson-builders>` section: 

.. literalinclude:: /includes/data-formats/bson.cpp
   :start-after: start-bson-values
   :end-before: end-bson-values
   :language: cpp
   :dedent:

BSON Document Views 
^^^^^^^^^^^^^^^^^^^

The ``document::view`` type is a view into a ``document::value`` that does not own its underlying buffer. When you pass a ``document::view`` 
object into a {+driver-short+} method, the method can refer to the underlying document without copying it. 
In performance-critical code, passing views is preferable to passing values because it avoids excess copying.

You can construct a ``document::view`` from a ``document::value`` or builder by calling the ``view()`` method.
The following code shows how to construct ``document::view`` objects 
from a ``document::value``, ``builder::basic::document``, and ``builder::stream::document`` object: 

.. literalinclude:: /includes/data-formats/bson.cpp
   :start-after: start-bson-views
   :end-before: end-bson-views
   :language: cpp
   :dedent:

A ``document::view`` must not outlive any ``document::value`` that it uses.
If a ``document::view`` uses a ``document::value`` after its underlying buffer
is freed, then the view will be left with a dangling pointer that can cause problems and unpredictable behavior. 

The following code creates a dangling pointer by returning a view that points to a document that is 
cleaned up when the local ``document::value`` goes out of scope: 

.. literalinclude:: /includes/data-formats/bson.cpp
   :start-after: start-bson-dangling-view
   :end-before: end-bson-dangling-view
   :language: cpp
   :dedent: 

Similarly, the following code creates a dangling view object off a builder, 
because the temporary value returned from the ``extract()`` method isn't captured: 

.. literalinclude:: /includes/data-formats/bson.cpp
   :start-after: start-bson-dangling-builder
   :end-before: end-bson-dangling-builder
   :language: cpp
   :dedent: 

.. _cpp-bson-builders: 

Build a BSON Document 
---------------------

The ``bsoncxx`` library offers three interfaces for building BSON.
The following sections show how to use each interface to create a BSON document:  

- :ref:`List Builder <cpp-bson-list>`
- :ref:`Basic Builder <cpp-bson-basic>`
- :ref:`Stream Builder <cpp-bson-stream>`

.. _cpp-bson-list:

List Builder
~~~~~~~~~~~~

The ``builder::list`` interface is a JSON-like builder for constructing documents and arrays. 
To create a BSON document using the list builder, first initialize a ``bsoncxx::builder::list`` object to a list of key-value pairs inside curly braces (``{}``). 
Each document key must be a ``string`` type, and each document value must be a ``bson_value::value`` type or implicitly convertible to one. Then, 
you can construct a ``bsoncxx::document::view`` by calling the ``view()`` method and then the ``get_document()`` method on your list builder object. 

The following code shows how to construct a BSON document using the list builder: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-list
      :end-before: end-bson-list
      :language: cpp
      :dedent:
   
   .. output:: 

      { "hello" : "world" }

.. _cpp-bson-basic:

Basic Builder
~~~~~~~~~~~~~

The ``builder::basic`` interface is a builder-style interface for constructing a BSON document. 
To create a ``bson::document::value`` object in a single call using the ``builder::basic`` interface, call the ``make_document()`` method 
and pass in a list of key-value pair objects. You can create these key-value pair objects by calling the ``builder::basic::kvp()`` 
method and passing in your key and value as the arguments. The key must be a ``string`` type, and the value must be a ``bson_value::value`` type or implicitly convertible to one. 

The following code shows how to use the ``make_document()`` method to build a BSON document: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-make-document
      :end-before: end-bson-make-document
      :language: cpp
      :dedent:
   
   .. output:: 

      { "hello" : "world" }

Alternatively, you can use the ``builder::basic`` interface to construct a BSON document by appending key-value pairs to a basic builder object.
To begin, create an empty basic builder object using the ``builder::basic::document`` constructor. 
Then, fill your builder with key-value pairs by calling the ``append()`` method and passing
in a list of ``builder::basic::kvp`` objects. 

.. To construct a ``bsoncxx::document::value`` from a basic builder instance, call the ``extract()`` method. You can also call the ``view()`` method 
.. on a list builder instance to return a ``bsoncxx::document::view`` of your BSON document. 

The following code shows how to create an empty BSON document and fill it with key-value pairs using the ``append()`` method: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-append
      :end-before: end-bson-append
      :language: cpp
      :dedent:
   
   .. output:: 

      { "hello" : "world" }

.. note:: 

   Many {+driver-short+} methods take a ``document::view_or_value`` parameter.
   These methods can take either a ``document::view`` or a ``document::value``. If
   a ``document::value`` is passed in, it must be passed by r-value reference, so
   ownership of the document is transferred to the method.

.. _cpp-bson-stream:

Stream Builder
~~~~~~~~~~~~~~

The ``builder::stream`` interface is a streaming interface for constructing complex BSON objects.
To create a BSON document using the stream builder, initialize a stream builder using the 
``builder::stream::document`` constructor. Then, you can stream keys and values into your builder
using the ``<<`` operator. Finally, you can extract a document value or view from your stream builder using the
``view()`` and ``value()`` methods. 

The following code shows how to create an empty BSON document and fill it with key-value pairs using the ``<<`` operator:

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-stream-finalize
      :end-before: end-bson-stream-finalize
      :language: cpp
      :dedent:
   
   .. output:: 

      stream_doc: { "hello" : "world" }

You can create a ``bsoncxx::document::value`` in a single line using the ``builder::stream::finalize`` token.
The following code shows how to return a ``document::value`` from a temporary stream builder using the ``finalize`` token:

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-stream-finalize
      :end-before: end-bson-stream-finalize
      :language: cpp
      :dedent:
   
   .. output:: 

      stream_doc: { "hello" : "world" }

The ``builder::stream`` interface also provides helped methods to build nested documents and concatenate documents onto existing documents. 
The following code shows how to use the ``open_document``, ``close_document``, and ``concatenate`` methods to nest and concatenate documents: 

The following code shows how to use methods from the ``builder::stream`` interface to build, nest, and concatenate BSON documents: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-concat-nest
      :end-before: end-bson-concat-nest
      :language: cpp
      :dedent:
   
   .. output:: 

      { "goodbye" : "world", "hello" : "again" }
      { "hello" : "world", "subDoc" : { "subdoc_key" : "subdoc_value" } }

.. important::

   To properly append each new value, a stream builder must keep track of the state of the current document, including the nesting
   level and the type of the most recent value appended to the builder. The initial
   stream builder must *not* be reused after this state changes, so all intermediate
   values must be stored in new variables if a document is being built
   with the stream builder across multiple statements.
   
   To avoid the added complexity of tracking intermediate values, 
   we recommend using the :ref:`Basic Builder <cpp-bson-basic>` instead 
   of the stream builder. 

.. _cpp-bson-print:

Printing BSON Documents
~~~~~~~~~~~~~~~~~~~~~~~

BSON is a binary-encoded serialization of JSON documents that is not human-readable.
To preview the contents of a BSON document in a human-readable format, 
you can convert your document to extended JSON format using the ``bsoncxx::to_json()`` method.  

The ``bsoncxx::to_json()`` method accepts a view of the BSON document you want to convert, 
and returns an ``std::string`` object containing the contents of your BSON document in extended JSON format, 
which is an extension of the JSON format that includes string representations of BSON data types. 
To learn more about type preservation in the extended JSON format, see the :manual:`MongoDB Extended JSON </reference/mongodb-extended-json>`
guide in the {+mdb-server+} manual. 

The following code shows how to convert a BSON document to JSON format and print the results: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-print
      :end-before: end-bson-print
      :language: cpp
      :dedent:
   
   .. output:: 

      { "I am" : "a BSON document" }

.. The ``bsoncxx::to_json()`` method also accepts an optional argument of type ``ExtendedJsonMode`` that sets the JSON representation mode of
.. of your converted document. You can choose from the following representation modes depending on your 
.. preferred level of readability and data preservation: 

.. - ``k_canonical``: extends the JSON format to ``Canonical`` mode, which emphasizes type information preservation at the expense of readability.
..   Conversion from canonical to BSON will generally preserve type information. 
.. - ``k_relaxed``: extends the JSON format to ``Relaxed`` mode, which emphasizes readability at the expense of type information preservation. 
..   Conversion from relaxed format to BSON can lose type information. 

.. To learn more about type preservation in the extended JSON format, see the :manual:`MongoDB Extended JSON </reference/mongodb-extended-json>`
.. guide in the {+mdb-server+} manual. 

.. There is an analogous method, ``from_json()``, to build ``document::values`` out of existing JSON strings.

.. _cpp-bson-types:

BSON Types
~~~~~~~~~~

The `BSON specification <http://bsonspec.org/spec.html>`__ provides a list
of supported types.  These are represented in C++ using the
`b_xxx <https://mongocxx.org/api/current/classes.html#letter_B>`__
type wrappers.

Some BSON types don't necessarily have a native representation to wrap and
are implemented via special classes.

Decimal128
``````````

The ``bsoncxx::decimal128`` class represents a 128-bit IEEE 754-2008 decimal
floating point value.  We expect users to convert these to and from
strings, but provide access to the low and high 64-bit values if users need
to convert to a native decimal128 type.

You can see how to work with ``bsoncxx::decimal128`` in `this example <https://github.com/mongodb/mongo-cxx-driver/blob/master/examples/bsoncxx/decimal128.cpp>`__.

.. _cpp-convert-bson-to-json:

Convert BSON to JSON
--------------------


.. _cpp-bson-addtl-info:

Additional Information
----------------------

To learn more about the concepts mentioned in this guide, see the
following Server manual entries:

- :manual:`BSON Types </reference/bson-types/>`
- :manual:`MongoDB Extended JSON (v2) </reference/mongodb-extended-json/>`

To learn more about performing read operations, see :ref:`cpp-read`.

To learn more about performing aggregation operations, see the :ref:`cpp-aggregation`
guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the types or methods mentioned in this guide, see the following API documentation:

- `bsoncxx::builder::list <{+api+}/classbsoncxx_1_1builder_1_1list.html>`__
- `bsoncxx::builder::basic::document <{+api+}/classbsoncxx_1_1builder_1_1basic_1_1document.html>`__
- `bsoncxx::builder::stream::document <{+api+}/classbsoncxx_1_1builder_1_1stream_1_1document.html>`__
- `bsoncxx::document::value <{+api+}/classbsoncxx_1_1document_1_1value.html>`__
- `bsoncxx::document::view <{+api+}/classbsoncxx_1_1document_1_1view.html>`__
- `bsoncxx::to_json() <{+api+}/namespacebsoncxx.html#a066323daaa4ae47a337c7134b81fc08b>`__