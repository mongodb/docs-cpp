.. _cpp-working-with-bson:

=================
Working with BSON
=================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

Overview
--------
In this guide, you can learn how to use the {+driver-short+} to store and interact
with **BSON data** by using the ``bsoncxx`` library.  

BSON Data Format 
----------------

MongoDB uses the **BSON**, or Binary JSON, data format to store documents and
make remote procedure calls. This data format includes all JSON data structure types
and adds support for types including dates, different size integers, ObjectIds,
and binary data. For a complete list of supported types, see the :manual:`BSON Types </reference/bson-types/>`
page in the {+mdb-server+} manual. 

BSON Values and Views
~~~~~~~~~~~~~~~~~~~~~

Many {+driver-short+} methods take a BSON document as an argument.
The ``bsoncxx`` library provides two types that represent an underlying
BSON document: ``document::value``, and ``document::view``. 

The ``document::value`` type represents a BSON document that
owns its underlying buffer of data. When you pass a ``document::value`` to a
{+driver-short+} method, the ownership of the underlying buffer is passed
to the caller and a copy of the ``document::value`` is created and passed
to the callee. When a ``document::value`` type goes out of scope, its
underlying buffer is freed.

The ``document::view`` type provides a non-owning view into a ``document::value``.
This type allows you to read and interact with the contents of a BSON
document without owning its underlying data. When you pass a ``document::view``
object to a {+driver-short+} method, the method can use data from the underlying document
without copying it. 

Some {+driver-short+} methods accept arguments of type ``document::view_or_value``. You
can pass either a ``document::view`` or ``document::value`` type to these methods. To
avoid excess copying, we recommend passing documents by view.

.. important:: 

   A ``document::view`` must not outlive any ``document::value`` that it references.
   If a ``document::view`` uses a ``document::value`` after its underlying buffer
   is freed, the view will contain a dangling pointer. Accessing a dangling pointer
   can cause application crashes, corrupted data, and other unpredictable behavior.

.. _cpp-bson-builders: 

Build a BSON Document 
---------------------

This section shows how to use the following interfaces to create a
BSON document:  

- :ref:`List Builder <cpp-bson-list>`
- :ref:`Basic Builder <cpp-bson-basic>`
- :ref:`Stream Builder <cpp-bson-stream>`

.. _cpp-bson-list:

List Builder
~~~~~~~~~~~~

The ``builder::list`` interface is a JSON-like builder for constructing documents and arrays. 
To create a BSON document using the list builder, first initialize a ``bsoncxx::builder::list``
object to a list of key-value pairs inside curly braces (``{}``).  Each document key must
be a ``string`` type, and each document value must be a ``bson_value::value`` type or
implicitly convertible to one. Then, you can construct a ``bsoncxx::document::view`` by
calling the ``view()`` method and then the ``get_document()`` method on your list builder
object. 

The following code shows how to construct a BSON document using the list builder: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-list
      :end-before: end-bson-list
      :language: cpp
      :dedent:
   
   .. output:: 

      { "hello" : "world" }

.. _cpp-bson-basic:

Basic Builder
~~~~~~~~~~~~~

The ``builder::basic`` interface is a builder-style interface for constructing a BSON document. 
To create a ``bson::document::value`` object in a single call using the ``builder::basic`` interface,
call the ``make_document()`` method and pass in a list of key-value pair objects. You can create
these key-value pair objects by calling the ``builder::basic::kvp()`` method and passing in your
key and value as the arguments. The key must be a ``string`` type, and the value must be a
``bson_value::value`` type or implicitly convertible to one. 

The following code shows how to use the ``make_document()`` method to build a BSON document: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-make-document
      :end-before: end-bson-make-document
      :language: cpp
      :dedent:
   
   .. output:: 

      { "hello" : "world" }

Alternatively, you can use the ``builder::basic`` interface to construct a BSON document
by appending key-value pairs to a basic builder object. To begin, create an empty basic
builder object using the ``builder::basic::document`` constructor. Then, fill your builder
with key-value pairs by calling the ``append()`` method and passing in a list of
``builder::basic::kvp`` objects. 

.. To construct a ``bsoncxx::document::value`` from a basic builder instance, call the ``extract()`` method. You can also call the ``view()`` method 
.. on a list builder instance to return a ``bsoncxx::document::view`` of your BSON document. 

The following code shows how to create an empty BSON document and fill it with key-value
pairs using the ``append()`` method: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-append
      :end-before: end-bson-append
      :language: cpp
      :dedent:
   
   .. output:: 

      { "hello" : "world" }

.. note:: 

   Many {+driver-short+} methods take a ``document::view_or_value`` parameter.
   These methods can take either a ``document::view`` or a ``document::value``. If
   a ``document::value`` is passed in, it must be passed by r-value reference, so
   ownership of the document is transferred to the method.

.. _cpp-bson-stream:

Stream Builder
~~~~~~~~~~~~~~

The ``builder::stream`` interface is a streaming interface for constructing complex BSON objects.
To create a BSON document using the stream builder, initialize a stream builder using the 
``builder::stream::document`` constructor. Then, you can stream keys and values into your builder
using the ``<<`` operator. Finally, you can extract a document value or view from your stream builder using the
``view()`` and ``value()`` methods. 

The following code shows how to create an empty BSON document and fill it with key-value pairs using the ``<<`` operator:

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-stream-finalize
      :end-before: end-bson-stream-finalize
      :language: cpp
      :dedent:
   
   .. output:: 

      stream_doc: { "hello" : "world" }

You can create a ``bsoncxx::document::value`` in a single line using the ``builder::stream::finalize`` token.
The following code shows how to return a ``document::value`` from a temporary stream builder using the ``finalize`` token:

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-stream-finalize
      :end-before: end-bson-stream-finalize
      :language: cpp
      :dedent:
   
   .. output:: 

      stream_doc: { "hello" : "world" }

The ``builder::stream`` interface also provides helped methods to build nested documents and concatenate documents onto existing documents. 
The following code shows how to use the ``open_document``, ``close_document``, and ``concatenate`` methods to nest and concatenate documents: 

The following code shows how to use methods from the ``builder::stream`` interface to build, nest, and concatenate BSON documents: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-concat-nest
      :end-before: end-bson-concat-nest
      :language: cpp
      :dedent:
   
   .. output:: 

      { "goodbye" : "world", "hello" : "again" }
      { "hello" : "world", "subDoc" : { "subdoc_key" : "subdoc_value" } }

.. important::

   To properly append each new value, a stream builder must keep track of the state of the current document, including the nesting
   level and the type of the most recent value appended to the builder. The initial
   stream builder must *not* be reused after this state changes, so all intermediate
   values must be stored in new variables if a document is being built
   with the stream builder across multiple statements.
   
   To avoid the added complexity of tracking intermediate values, 
   we recommend using the :ref:`Basic Builder <cpp-bson-basic>` instead 
   of the stream builder. 

.. _cpp-bson-print:

Printing BSON Documents
~~~~~~~~~~~~~~~~~~~~~~~

BSON is a binary-encoded serialization of JSON documents that is not human-readable.
To preview the contents of a BSON document in a human-readable format, you can use the 
``bsoncxx::to_json()`` method to convert your document to extended JSON format.  

Extended JSON format is an extension of standard JSON that includes string representations of BSON data types. 
To learn more, see the :manual:`MongoDB Extended JSON </reference/mongodb-extended-json>`
guide in the {+mdb-server+} manual.

The ``bsoncxx::to_json()`` method accepts a ``bsoncxx::document::view`` of the BSON document you want to convert, 
and returns an ``std::string`` object representing your BSON document in extended JSON format. 
The following code shows how to convert a BSON document to extended JSON format and print the results: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-print
      :end-before: end-bson-print
      :language: cpp
      :dedent:
   
   .. output:: 

      { "I am" : "a BSON document" }




.. _cpp-bson-addtl-info:

Additional Information
----------------------

To learn more about the concepts mentioned in this guide, see the
following Server manual entries:

- :manual:`BSON Types </reference/bson-types/>`
- :manual:`MongoDB Extended JSON (v2) </reference/mongodb-extended-json/>`

To learn more about performing read operations, see :ref:`cpp-read`.

To learn more about performing aggregation operations, see the :ref:`cpp-aggregation`
guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the types or methods mentioned in this guide, see the following API documentation:

- `bsoncxx::builder::list <{+api+}/classbsoncxx_1_1builder_1_1list.html>`__
- `bsoncxx::builder::basic::document <{+api+}/classbsoncxx_1_1builder_1_1basic_1_1document.html>`__
- `bsoncxx::builder::stream::document <{+api+}/classbsoncxx_1_1builder_1_1stream_1_1document.html>`__
- `bsoncxx::document::value <{+api+}/classbsoncxx_1_1document_1_1value.html>`__
- `bsoncxx::document::view <{+api+}/classbsoncxx_1_1document_1_1view.html>`__
- `bsoncxx::to_json() <{+api+}/namespacebsoncxx.html#a066323daaa4ae47a337c7134b81fc08b>`__