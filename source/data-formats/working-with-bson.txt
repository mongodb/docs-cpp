.. _cpp-working-with-bson:

=================
Working with BSON
=================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

Overview
--------
`examples <https://github.com/mongodb/mongo-cxx-driver/tree/master/examples/bsoncxx>`__.

In this guide, you can learn how to use the {+driver-short+} to store and interact with **BSON data**. 

The {+driver-short+} ships with the ``bsoncxx`` library. 
The following sections show how you can use classes and methods from the ``bsoncxx`` library to create BSON documents, read BSON from a file, write BSON to a file, and 
convert BSON documents into JSON documents. 

BSON Data Format 
----------------

 **BSON**, or Binary JSON, is the data format that MongoDB uses to store documents and make remote procedure calls. 
This data format includes all JSON data structure types and adds support for types including dates, different size
integers, ObjectIds, and binary data. For a complete list of supported types, see the :manual:`BSON Types </reference/bson-types/>` page 
in the {+mdb-server+} manual. 

The code examples in this guide create, update, and store BSON documents 
that contain the following data, represented here in extended JSON format: 

.. code-block:: json 

   {
      "address" : {
         "street" : "Pizza St",
         "zipcode" : "10003"
      },
      "coord" : [-73.982419, 41.579505],
      "cuisine" : "Pizza",
      "name" : "Mongo's Pizza"
   }

.. tip::

   To preview the contents of your BSON document in a human-readable format, you can
   convert it to extended JSON format by calling the ``bsoncxx::to_json()`` method. 
   To learn more, see the :ref:`Convert from BSON to JSON <cpp-convert-bson-to-json>` 
   section. 

.. _cpp-bson-builders: 

Create a BSON Document 
----------------------

The ``bsoncxx`` library offers three interfaces for building BSON.
The following sections show how to use each interface to create a BSON document:  

- :ref:`List Builder <cpp-bson-list>`
- :ref:`Basic Builder <cpp-bson-basic>`
- :ref:`Stream Builder <cpp-bson-stream>`

.. _cpp-bson-list:

List Builder
~~~~~~~~~~~~

The ``builder::list`` interface is o JSON-like builder for creating documents and arrays. To create a BSON document using the list builder, 
initialize a ``bsoncxx::builder::list`` object to a list of key-value pairs inside curly braces (``{}``). 
Each document key must be a ``string`` type, and each document value must be a ``bson_value::value`` type or implicitly convertible to one. 

.. The size of the initializer list must be even to imply a list of key-value pairs or an empty document if the size is zero. 

The following code shows how to create a BSON document using the list builder: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-list
      :end-before: end-bson-list
      :language: cpp
      :dedent:
   
   .. output:: 

      { "address" : { "street" : "Pizza St", "zipcode" : "10003" }, "coord" : [ -73.982418999999993048, 41.579504999999997494 ], "cuisine" : "Pizza", "name" : "Mongo's Pizza" }

.. _cpp-bson-one-off:

Basic Builder Interface
~~~~~~~~~~~~~~~~~~~~~~~

The ``builder::basic`` interface provides data types and methods to construct BSON documents out of key-value pair objects. 

To create a key-value pair object, call the ``builder::basic::kvp()`` method and pass in your 
key and value as arguments. The key must be a ``string`` type, and the value must be a ``bson_value::value`` type or implicitly convertible to one. 
The resulting ``kvp`` object can be passed into the following methods from the ``builder::basic`` interface to build a BSON document: 

- ``make_document()``: accepts a list of ``kvp`` objects and returns a ``document::value`` object representing your BSON document
- ``document.append()``: appends a list of key-value pair objects to an existing ``builder::basic::document`` object representing your BSON document

.. One-off Call
.. ^^^^^^^^^^^^

.. To create a BSON document in a single call, call the ``make_document()`` method and pass in a 
.. list of key-value pair objects. The ``make_document()`` method returns a ``bsoncxx::document::value`` object
.. that represents your BSON document. 

The following code calls the ``make_document()`` method and passes in a list of key-value pair objects to build a BSON document: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-one-off
      :end-before: end-bson-one-off
      :language: cpp
      :dedent:
   
   .. output:: 

      { "hello" : "world" }

.. Construct and Append 
.. ^^^^^^^^^^^^^^^^^^^^

.. Alternatively, you can build a BSON document by appending key-value pair objects to an empty ``builder::basic::document`` object. 
.. To initialize your empty BSON document, call the ``builder::basic::document`` constructor with no arguments. 
.. To fill your document, call the ``append()`` method on your ``builder::basic::document`` object and pass in a list of key-value pairs. 

The following code initializes an empty BSON document and then fills it with key-value pairs using the ``append()`` method: 

.. io-code-block::

   .. input:: /includes/data-formats/bson.cpp
      :start-after: start-bson-append
      :end-before: end-bson-append
      :language: cpp
      :dedent:
   
   .. output:: 

      { "hello" : "world" }

.. _cpp-bson-stream:

Stream Builder
~~~~~~~~~~~~~~

.. code-block:: cpp

   // { "hello" : "world" }

   using bsoncxx::builder::stream;
   bsoncxx::document::value document = stream::document{} << "hello" << "world" << stream::finalize;

More advanced uses of the stream builder are shown in `this
example <https://github.com/mongodb/mongo-cxx-driver/blob/master/examples/bsoncxx/builder_stream.cpp>`__.

.. note::

   In order to properly append each new value, a stream builder
   needs to keep track of the state of the current document, including the nesting
   level and the type of the most recent value appended to the builder. The initial
   stream builder must *not* be reused after this state changes, which means that
   intermediate values must be stored in new variables if a document is being built
   with the stream builder across multiple statements. Because doing this properly
   is difficult and the compiler error messages can be confusing, using the stream
   builder is discouraged. We recommend instead using the basic builder or the
   :ref:`one-off builder functions <cpp-bson-one-off>`.

Building Arrays in Loops
~~~~~~~~~~~~~~~~~~~~~~~~

Sometimes it's necessary to build an array using a loop. With the basic
builder, a top-level array can be built by simply calling ``append`` inside
a loop:

.. code-block:: cpp

   // [ 1, 2, 3 ]

   const auto elements = {1, 2, 3};
   auto array_builder = bsoncxx::builder::basic::array{};

   for (const auto& element : elements) {
       array_builder.append(element);
   }

To build a subarray in a loop, pass a lambda to ``append`` (or as the second
argument of ``kvp`` if the subarray is contained by a document rather than
an array):

.. code-block:: cpp

   // { "foo" : [ 1, 2, 3 ] }

   using bsoncxx::builder::basic::kvp;
   using bsoncxx::builder::basic::sub_array;

   const auto elements = {1, 2, 3};
   auto doc = bsoncxx::builder::basic::document{};
   doc.append(kvp("foo", [&elements](sub_array child) {
       for (const auto& element : elements) {
           child.append(element);
       }
   }));

When building an array with the stream builder, it's important to be aware
that the return type of using the ``<<`` operator on a stream builder is not
uniform. To build an array in a loop properly, intermediate values
returned by the stream builder should be stored in variables when the type
changes. One attempt to build an array from a stream builder using a loop
might look like the following:

.. code-block:: cpp

   // { "subdocs" : [ { "key" : 1 }, { "key" : 2 }, { "key" : 3 } ], "another_key" : 42 }
   using namespace bsoncxx;

   builder::stream::document builder{};

   auto in_array = builder << "subdocs" << builder::stream::open_array;
   for (auto&& e : {1, 2, 3}) {
       in_array = in_array << builder::stream::open_document << "key" << e
                           << builder::stream::close_document;
   }
   auto after_array = in_array << builder::stream::close_array;

   after_array << "another_key" << 42;

   document::value doc = after_array << builder::stream::finalize;

   std::cout << to_json(doc) << std::endl;

.. note::
   The result of any stream operation should be captured, so if you want
   to split the single statement within the for loop above into multiple
   statements, you must capture each intermediate result. Additionally, the last
   statement within the loop body should assign its result back to the in_array
   object, so that the loop restarts in a consistent state:

   .. code-block:: cpp

      for (auto && e : {1, 2, 3}) {
         auto open_state = in_array << builder::stream::open_document;
         auto temp_state = open_state << "key" << e;
         in_array = temp_state << builder::stream::close_document;
      }

.. _cpp-bson-value:

Owning BSON Documents
~~~~~~~~~~~~~~~~~~~~~

`bsoncxx::document::value <https://github.com/mongodb/mongo-cxx-driver/blob/master/src/bsoncxx/include/bsoncxx/v_noabi/bsoncxx/document/value.hpp>`__

The ``bsoncxx::document::value`` data type represents an actual BSON document that owns its buffer of data. 
When you pass a document value to a function, the function body creates a copy of the ``bsoncxx::document::value`` 
object 
 

 These documents can be constructed from a builder by calling
``extract()``:

.. code-block:: cpp

   bsoncxx::document::value basic_doc{basic_builder.extract()};
   bsoncxx::document::value stream_doc{stream_builder.extract()};

After calling ``extract()`` the builder is in a moved-from state,
and should not be used.

It's possible to create a ``bsoncxx::document::value`` in a single line using
the stream builder interface and the ``finalize`` token. ``finalize`` returns a
``document::value`` from a temporary stream builder:

.. code-block:: cpp

   // { "finalize" : "is nifty" }
   bsoncxx::document::value one_line = bsoncxx::builder::stream::document{} << "finalize" << "is nifty" << bsoncxx::builder::stream::finalize;

.. _cpp-bson-view:

Non-owning BSON Documents (views)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`bsoncxx::document::view <https://github.com/mongodb/mongo-cxx-driver/blob/master/src/bsoncxx/include/bsoncxx/v_noabi/bsoncxx/document/view.hpp>`__

The ``bsoncxx::document::view`` data type provides read-only access to an existing ``bsoncxx::document`` object. A document view is preferable to a 
``bsoncxx::document::value`` when you want to read, but not modify, the contents of a BSON document. 

Document views are   function parameters 
when a ``bsoncxx::document`` 

is a read-only data type that provides access  is a view into an owning ``bsoncxx::document::value``. 

.. code-block:: cpp

   bsoncxx::document::view document_view{document_value.view()};

A ``document::value`` also implicitly converts to a ``document::view``:

.. code-block:: cpp

   bsoncxx::document::view document_view{document_value};

In performance-critical code, passing views around is preferable to using
values because we can avoid excess copying. Also, passing a view of a
document allows us to use the document multiple times:

.. code-block:: cpp

   // { "copies" : { "$gt" : 100 } }
   auto query_value = document{} << "copies" << open_document << "$gt" << 100 << close_document << finalize;

   // Run the same query across different collections
   auto collection1 = db["science_fiction"];
   auto cursor1 = collection1.find(query_value.view());

   auto collection2 = db["cookbooks"];
   auto cursor2 = collection2.find(query_value.view());

.. _cpp-bson-view_or_value:

Optionally-owning BSON Documents (view_or_value)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Many driver methods take a ``document::view_or_value`` parameter, for example,
`run_command <https://github.com/mongodb/mongo-cxx-driver/blob/master/src/mongocxx/include/mongocxx/v_noabi/mongocxx/database.hpp#L144-L153>`__:

.. code-block:: cpp

   bsoncxx::document::value run_command(bsoncxx::document::view_or_value command);

Such methods can take either a ``document::view`` or a ``document::value``. If
a ``document::value`` is passed in, it must be passed by r-value reference, so
ownership of the document is transferred to the method.

.. code-block:: cpp

   document::value ping = document{} << "ping" << 1 << finalize;

   // You can pass a document::view into run_command()
   db.run_command(ping.view());

   // Or you can move in a document::value
   db.run_command(std::move(ping));

You shouldn't need to create ``view_or_value`` types directly in order to use
the driver.  They are offered as a convenience method to allow driver
methods to take documents in either an owning or non-owning way.  The
``view_or_value`` type also helps mitigate some of the lifetime issues
discussed in the next section.

.. _cpp-bson-lifetime:

BSON Document Lifetime
~~~~~~~~~~~~~~~~~~~~~~

It is imperative that ``document::value`` types outlive any ``document::view`` types that
use them. If the underlying value gets cleaned up, the view will be left
with a dangling pointer.  Consider a method that returns a view of a
newly-created document:

.. code-block:: cpp

   bsoncxx::document::view make_a_dangling_view() {
      bsoncxx::builder::basic::document builder{};
      builder.append(kvp("hello", "world"));

      // This creates a document::value on the stack that will disappear when we return.
      bsoncxx::document::value stack_value{builder.extract()};

      // We're returning a view of the local value
      return stack_value.view(); // Bad!!
   }

This method returns a dangling view that should not be used:

.. code-block:: cpp

   // This view contains a dangling pointer
   bsoncxx::document::view dangling_view = make_a_dangling_view(); // Warning!!

Attempting to create a view off of a builder will similarly create a
dangerous view object, because the temporary value returned from
``extract()`` isn't captured:

.. code-block:: cpp

   bsoncxx::builder::stream::document temp_builder{};
   temp_builder << "oh" << "no";
   bsoncxx::document::view dangling_view = temp_builder.extract().view(); // Bad!!

.. _cpp-bson-print:

Printing BSON Documents
~~~~~~~~~~~~~~~~~~~~~~~

`bsoncxx::to_json() <https://github.com/mongodb/mongo-cxx-driver/blob/master/src/bsoncxx/include/bsoncxx/v_noabi/bsoncxx/json.hpp#L39-L55>`__

The bsoncxx library comes with a convenience method to convert BSON
documents to strings for easy inspection:

.. code-block:: cpp

   bsoncxx::document::value = document{} << "I am" << "a BSON document" << finalize;
   std::cout << bsoncxx::to_json(doc.view()) << std::endl;


BSON is a binary-encoded serialization of JSON documents that is not human-readable.
To preview the contents of a BSON document in a human-readable format, 
you can convert your document to extended JSON format using the ``bsoncxx::to_json()`` method. 


To preview the contents of your BSON document in a human-readable format, you can
convert it to extended JSON format by calling the ``bsoncxx::to_json()`` method 
and passing in a ``bsoncxx::document::view`` of your BSON document. 

The ``bsoncxx::to_json()`` method returns an extended JSON ``std::string`` object 
that includes string representations for BSON data types. 

The ``bsoncxx::to_json()`` method accepts the following arguments:

- A valid BSON document view of the document you want to convert
- An optional extended JSON representation mode  

The ``bsoncxx::to_json()`` method also accepts an optional argument of type ``ExtendedJsonMode`` that sets the JSON representation mode of
of your converted document. You can choose from the following representation modes depending on your 
preferred level of readability and data preservation: 

- ``k_canonical``: extends the JSON format to ``Canonical`` mode, which emphasizes type information preservation at the expense of readability.
  Conversion from canonical to BSON will generally preserve type information. 
- ``k_relaxed``: extends the JSON format to ``Relaxed`` mode, which emphasizes readability at the expense of type information preservation. 
  Conversion from relaxed format to BSON can lose type information. 

To learn more about type preservation in the extended JSON format, see the :manual:`MongoDB Extended JSON </reference/mongodb-extended-json>`
guide in the {+mdb-server+} manual. 

There is an analogous method, `from_json() <https://github.com/mongodb/mongo-cxx-driver/blob/master/src/bsoncxx/include/bsoncxx/v_noabi/bsoncxx/json.hpp#L57-L67>`__, to build ``document::values`` out of existing JSON strings.

.. _cpp-bson-fields:

Getting Fields out of BSON Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The [ ] operator reaches into a BSON document to retrieve values:

.. code-block:: cpp

   // doc_view = { "store" : "Key Foods", "fruits" : [ "apple", "banana" ] }
   auto store = doc_view["store"];
   auto first_fruit = doc_view["fruits"][0];

This returns a ``bsoncxx::document::element``, which holds the actual desired value:

.. code-block:: cpp

   document::element store_ele{doc_view["store"]};
   if (store_ele) {
       // this block will only execute if "store" was found in the document
       std::cout << "Examining inventory at " << to_json(store_ele.get_value()) << std::endl;
   }

This feature is shown in more detail in `this example
<https://github.com/mongodb/mongo-cxx-driver/blob/master/examples/bsoncxx/getting_values.cpp>`__
and `this example
<https://github.com/mongodb/mongo-cxx-driver/blob/master/examples/bsoncxx/view_and_value.cpp>`__.

.. _cpp-bson-types:

BSON Types
~~~~~~~~~~

The `BSON specification <http://bsonspec.org/spec.html>`__ provides a list
of supported types.  These are represented in C++ using the
`b_xxx <https://mongocxx.org/api/current/classes.html#letter_B>`__
type wrappers.

Some BSON types don't necessarily have a native representation to wrap and
are implemented via special classes.

Decimal128
``````````

The ``bsoncxx::decimal128`` class represents a 128-bit IEEE 754-2008 decimal
floating point value.  We expect users to convert these to and from
strings, but provide access to the low and high 64-bit values if users need
to convert to a native decimal128 type.

You can see how to work with ``bsoncxx::decimal128`` in `this example <https://github.com/mongodb/mongo-cxx-driver/blob/master/examples/bsoncxx/decimal128.cpp>`__.

.. _cpp-convert-bson-to-json:

Convert BSON to JSON
--------------------


.. _cpp-bson-addtl-info:

Additional Information
----------------------

To learn more about the concepts mentioned in this guide, see the
following Server manual entries:

- :manual:`BSON Types </reference/bson-types/>`
- :manual:`MongoDB Extended JSON (v2) </reference/mongodb-extended-json/>`

To learn more about performing read operations, see :ref:`cpp-read`.

To learn more about performing aggregation operations, see the :ref:`cpp-aggregation`
guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the methods mentioned in this guide, see the following API documentation:

- `bsoncxx::builder::list <{+api+}/classbsoncxx_1_1builder_1_1list.html>`__
- `bsoncxx::builder::basic::document <{+api+}/classbsoncxx_1_1builder_1_1basic_1_1document.html>`__